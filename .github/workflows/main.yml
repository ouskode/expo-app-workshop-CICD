# .github/workflows/main.yml

name: Expo Project CI/CD

on:
  push:
    branches:
      - main # ou master, selon votre branche principale
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Lancement des tests et de la vérification de style
  lint_and_unit_test:
    name: Lint & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 셋업 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Utilisez la version de Node.js de votre projet
          cache: 'npm'

      - name: 📦 Installation des dépendances
        run: npm ci # 'ci' est plus rapide et plus sûr pour la CI/CD

      - name: 👕 Lancement du Linter (ESLint - Airbnb)
        run: npm run lint

      - name: 🧪 Lancement des tests unitaires (Jest)
        run: npm run test -- --ci --coverage --reporters=default --reporters=jest-sonar

  # Job 2: Test de l'image Docker
  docker_test:
    name: Docker Image Test
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 🐳 Construction de l'image Docker
        run: docker build . --file Dockerfile --tag my-app:$(date +%s)

      - name: 🔬 Test de l'image Docker
        # Ce test vérifie simplement que l'environnement est correct
        run: docker run --rm my-app:$(date +%s) node --version

  # Job 3: Analyse de la qualité avec SonarQube (SonarCloud)
  sonarqube_analysis:
    name: SonarQube Quality Check
    runs-on: ubuntu-latest
    needs: [lint_and_unit_test] # Dépend de la réussite des tests
    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Nécessaire pour une analyse correcte des branches

      - name:  SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=votre-organisation-sonar
            -Dsonar.projectKey=votre-cle-de-projet-sonar
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=test-report.xml

  # Job 4: Compilation et déploiement
  build_and_deploy:
    name: Build & Deploy App
    runs-on: ubuntu-latest
    needs: [lint_and_unit_test, sonarqube_analysis, docker_test] # Ne se lance que si TOUT a réussi
    if: github.ref == 'refs/heads/main' # Ne déploie que sur la branche principale
    steps:
      - name: ⬇️ Checkout du code
        uses: actions/checkout@v4

      - name: 셋업 Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 셋업 Set up Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: 📦 Installation des dépendances
        run: npm ci

      - name: 🏗️ Compilation du projet (Build)
        run: eas build --platform android --profile production --non-interactive --no-wait

      - name: 🚀 Déploiement sur le store
        # Cette étape est un exemple. 'eas submit' est la commande habituelle.
        # Vous pouvez la configurer pour pointer vers le build le plus récent.
        run: echo "Déploiement avec EAS Submit..." # Remplacer par 'eas submit --platform android --latest'