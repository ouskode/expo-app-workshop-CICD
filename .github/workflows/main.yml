# .github/workflows/main.yml

name: Expo Project CI/CD

on:
  push:
    branches:
      - main # ou master, selon votre branche principale
  pull_request:
    branches:
      - main

jobs:
  # Job 1: Lancement des tests et de la v√©rification de style
  lint_and_unit_test:
    name: Lint & Unit Tests
    runs-on: ubuntu-latest
    continue-on-error: true # Le workflow continuera m√™me si ce job √©choue
    steps:
      - name: ‚¨áÔ∏è Checkout du code
        uses: actions/checkout@v4

      - name: ÏÖãÏóÖ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: üì¶ Installation des d√©pendances
        run: npm ci

      - name: üëï Lancement du Linter (ESLint)
        run: npm run lint

      - name: üß™ Lancement des tests unitaires (Jest)
        run: npm run test -- --ci --coverage --reporters=default --reporters=jest-sonar

  # Job 2: Test de l'image Docker
  docker_test:
    name: Docker Image Test
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout du code
        uses: actions/checkout@v4

      - name: üê≥ Construction de l'image Docker
        # Correction : Utilisation d'un tag constant bas√© sur le commit SHA
        run: docker build . --file Dockerfile --tag my-app:${{ github.sha }}

      - name: üî¨ Test de l'image Docker
        # Correction : Utilisation du m√™me tag constant
        run: docker run --rm my-app:${{ github.sha }} npm run lint

  # Job 3: Analyse de la qualit√© avec SonarQube (SonarCloud)
  sonarqube_analysis:
    name: SonarQube Quality Check
    runs-on: ubuntu-latest
    needs: [lint_and_unit_test]
    steps:
      - name: ‚¨áÔ∏è Checkout du code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name:  SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=votre-organisation-sonar
            -Dsonar.projectKey=votre-cle-de-projet-sonar
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.testExecutionReportPaths=test-report.xml

  # Job 4: Compilation et d√©ploiement
  build_and_deploy:
    name: Build & Deploy App
    runs-on: ubuntu-latest
    needs: [lint_and_unit_test, sonarqube_analysis, docker_test]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: ‚¨áÔ∏è Checkout du code
        uses: actions/checkout@v4

      - name: ÏÖãÏóÖ Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: ÏÖãÏóÖ Set up Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: üì¶ Installation des d√©pendances
        run: npm ci

      - name: üèóÔ∏è Compilation du projet (Build)
        run: eas build --platform android --profile production --non-interactive --no-wait

      - name: üöÄ D√©ploiement sur le store
        run: echo "D√©ploiement avec EAS Submit..."

  build_for_e2e:
    name: Build App for E2E Tests
    runs-on: ubuntu-latest
    needs: [lint_and_unit_test, sonarqube_analysis, docker_test]
    outputs:
      apk_path: ${{ steps.build_android.outputs.apk_path }} # Permet de passer le chemin de l'APK au job suivant
    steps:
      - name: ‚¨áÔ∏è Checkout du code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Expo and EAS
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          expo-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: üì¶ Installation des d√©pendances
        run: npm ci

      - name: üèóÔ∏è Build Android APK for E2E
        id: build_android # Ajout d'un ID pour r√©cup√©rer les outputs
        run: |
          eas build --platform android --profile development --non-interactive --no-wait
          # R√©cup√©rer le chemin de l'APK une fois le build termin√©
          # Ceci est une simplification. Dans un vrai sc√©nario, vous devriez t√©l√©charger l'artefact.
          # Par exemple, en utilisant 'eas build:list --status finished --limit 1'
          # Pour l'exemple, nous allons simuler un chemin pour montrer le principe.
          echo "Simulating APK download for E2E"
          # Pour un vrai sc√©nario, utilisez 'eas build:download'
          echo "apk_path=./your-app.apk" >> $GITHUB_OUTPUT

  e2e_tests:
    name: End-to-End Tests (Maestro)
    runs-on: ubuntu-latest
    needs: [build_for_e2e] # D√©pend de la construction de l'APK
    steps:
      - name: ‚¨áÔ∏è Checkout du code
        uses: actions/checkout@v4

      # Installer Maestro CLI
      - name: ‚¨áÔ∏è Install Maestro CLI
        run: curl -Ls "https://get.maestro.mobile.dev" | bash

      # Configurer Java (n√©cessaire pour Android et Maestro)
      - name: ‚òï Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # Configurer Android SDK (n√©cessaire pour les √©mulateurs)
      - name: ü§ñ Setup Android SDK
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30 # Ou la version d'API souhait√©e
          target: default
          arch: x86_64
          # skin: pixel_4 # Optionnel
          # disable-animations: true # Rend les tests plus rapides

      - name: ‚¨áÔ∏è Download APK Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-app-for-e2e # Nom de l'artefact upload√© par le job de build (si vous l'aviez upload√©)
          path: . # T√©l√©charge l'APK dans le r√©pertoire courant

      - name: üöÄ Lancer les tests Maestro
        # Remplacez 'path/to/your-app.apk' par le chemin r√©el de l'APK t√©l√©charg√©.
        # Vous devrez adapter cette partie pour r√©cup√©rer l'APK de mani√®re fiable.
        # Par exemple, si vous l'avez upload√© en tant qu'artefact dans le job pr√©c√©dent.
        run: |
          # Cet exemple suppose que l'APK a √©t√© t√©l√©charg√© et se trouve √† la racine.
          # Adaptez 'your-app.apk' au nom r√©el du fichier APK.
          export MAESTRO_APP_FILE=./your-app.apk
          ~/.maestro/bin/maestro test maestro/ # Lance tous les tests dans le dossier maestro/